<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>URL Shortener Dashboard</title>
  <style>
    body { font-family: Arial, sans-serif; margin: 0; padding: 20px; }
    .container { max-width: 1200px; margin: 0 auto; }
    .header { display: flex; justify-content: space-between; margin-bottom: 20px; }
    .card { background: #fff; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); padding: 20px; margin-bottom: 20px; }
    table { width: 100%; border-collapse: collapse; }
    th, td { padding: 12px; text-align: left; border-bottom: 1px solid #ddd; }
    th { background-color: #f5f5f5; }
    .chart-container { height: 300px; margin-top: 20px; }
    .logout-btn { background: #ff4444; color: white; border: none; padding: 8px 16px; border-radius: 4px; cursor: pointer; }
    .slug-cell { position: relative; }
    .slug-edit { padding: 5px; width: 150px; }
    .edit-slug-btn, .save-slug-btn, .cancel-slug-btn { 
      padding: 2px 5px; 
      margin-left: 5px; 
      font-size: 12px; 
      border: none;
      border-radius: 3px;
      cursor: pointer;
    }
    .edit-slug-btn { background: #4CAF50; color: white; }
    .save-slug-btn { background: #2196F3; color: white; }
    .cancel-slug-btn { background: #f44336; color: white; }
    .loading { color: #666; font-style: italic; }
  </style>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
  <div class="container">
    <div class="header">
      <h1>Your Dashboard</h1>
      <button class="logout-btn" id="logout-btn">Logout</button>
    </div>

    <div class="card">
      <h2>Shorten a New URL</h2>
      <form id="url-form">
        <input type="text" id="url-input" placeholder="Enter URL to shorten" required style="width: 60%; padding: 8px;">
        <input type="text" id="slug-input" placeholder="Custom slug (optional)" style="width: 30%; padding: 8px;">
        <button type="submit" style="padding: 8px 16px; background: #4CAF50; color: white; border: none; cursor: pointer;">Shorten</button>
      </form>
      <div id="error" style="color: red; margin-top: 10px;"></div>
      <div id="result" style="margin-top: 10px;"></div>
    </div>

    <div class="card">
      <h2>Your URLs</h2>
      <table id="urls-table">
        <thead>
          <tr>
            <th>Original URL</th>
            <th>Short URL</th>
            <th>Clicks</th>
          </tr>
        </thead>
        <tbody></tbody>
      </table>
    </div>

    <div class="card">
      <h2>Popular URLs</h2>
      <div class="chart-container">
        <canvas id="popular-urls-chart"></canvas>
      </div>
    </div>
  </div>

  <script>
    // Authentication check
    const token = localStorage.getItem('token');    

    // console.log('token in dashboard', token);
    
    if (!token) window.location.href = '/login';

    // DOM elements
    const logoutBtn = document.getElementById('logout-btn');
    const urlForm = document.getElementById('url-form');
    const urlInput = document.getElementById('url-input');
    const slugInput = document.getElementById('slug-input');
    const errorDiv = document.getElementById('error');
    const resultDiv = document.getElementById('result');
    const urlsTable = document.getElementById('urls-table').querySelector('tbody');

    // Logout
    logoutBtn.addEventListener('click', () => {
      localStorage.removeItem('token');
      window.location.href = '/login';
    });

    // Load user's URLs
    async function loadUserUrls() {
      try {
        urlsTable.innerHTML = '<tr><td colspan="5" class="loading">Loading your URLs...</td></tr>';
        
        const response = await fetch('/v1/urls', {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });
        const urls = await response.json();
        
        urlsTable.innerHTML = urls.map(url => `
          <tr data-id="${url.id}">
            <td><a href="${url.originalUrl}" target="_blank">${url.originalUrl}</a></td>
            <td class="slug-cell">
              <a href="${url.originalUrl}" target="_blank" class="slug-link">${window.location.host}/${url.slug}</a>
              <input type="text" value="${url.slug}" class="slug-edit" style="display: none;">
              <button class="edit-slug-btn">Edit</button>
              <button class="save-slug-btn" style="display: none;">Save</button>
              <button class="cancel-slug-btn" style="display: none;">Cancel</button>
            </td>
            <td>${url.clicks}</td>
          </tr>
        `).join('');

        // Set up event listeners for slug editing
        setupSlugEditListeners();
        // Set up event listeners for delete buttons
        setupDeleteListeners();
      } catch (error) {
        console.error('Failed to load URLs:', error);
        urlsTable.innerHTML = '<tr><td colspan="5" style="color: red;">Failed to load URLs. Please try again.</td></tr>';
      }
    }

    // Set up slug edit functionality
    function setupSlugEditListeners() {
      document.querySelectorAll('.edit-slug-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const row = e.target.closest('tr');
          toggleSlugEdit(row, true);
        });
      });

      document.querySelectorAll('.cancel-slug-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const row = e.target.closest('tr');
          toggleSlugEdit(row, false);
        });
      });

      document.querySelectorAll('.save-slug-btn').forEach(btn => {
        btn.addEventListener('click', async (e) => {
          const row = e.target.closest('tr');
          const urlId = row.dataset.id;
          const slugInput = row.querySelector('.slug-edit');
          const newSlug = slugInput.value.trim();
          
          if (!newSlug) {
            alert('Slug cannot be empty');
            return;
          }

          try {
            const saveBtn = row.querySelector('.save-slug-btn');
            saveBtn.textContent = 'Saving...';
            saveBtn.disabled = true;

            const response = await fetch(`/v1/urls/${urlId}/slug`, {
              method: 'PATCH',
              headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
              },
              body: JSON.stringify({ slug: newSlug })
            });

            if (!response.ok) {
              const error = await response.json();
              throw new Error(error.message);
            }

            // Refresh the URLs list
            loadUserUrls();
            loadPopularUrlsChart();
          } catch (error) {
            alert(error.message);
            toggleSlugEdit(row, false);
          }
        });
      });
    }

    // Toggle slug edit mode
    function toggleSlugEdit(row, isEditing) {
      const slugLink = row.querySelector('.slug-link');
      const slugEdit = row.querySelector('.slug-edit');
      const editBtn = row.querySelector('.edit-slug-btn');
      const saveBtn = row.querySelector('.save-slug-btn');
      const cancelBtn = row.querySelector('.cancel-slug-btn');

      if (isEditing) {
        slugLink.style.display = 'none';
        slugEdit.style.display = 'inline-block';
        editBtn.style.display = 'none';
        saveBtn.style.display = 'inline-block';
        cancelBtn.style.display = 'inline-block';
        slugEdit.focus();
      } else {
        const originalSlug = slugLink.textContent.split('/').pop();
        slugLink.style.display = 'inline';
        slugEdit.style.display = 'none';
        slugEdit.value = originalSlug;
        editBtn.style.display = 'inline-block';
        saveBtn.style.display = 'none';
        cancelBtn.style.display = 'none';
        saveBtn.textContent = 'Save';
        saveBtn.disabled = false;
      }
    }

    // Set up delete functionality
    function setupDeleteListeners() {
      document.querySelectorAll('.delete-url-btn').forEach(btn => {
        btn.addEventListener('click', async (e) => {
          if (!confirm('Are you sure you want to delete this URL?')) return;
          
          const urlId = e.target.dataset.id;
          try {
            e.target.textContent = 'Deleting...';
            e.target.disabled = true;

            const response = await fetch(`/v1/urls/${urlId}`, {
              method: 'DELETE',
              headers: {
                'Authorization': `Bearer ${token}`
              }
            });

            if (!response.ok) {
              throw new Error('Failed to delete URL');
            }

            // Refresh the URLs list
            loadUserUrls();
            loadPopularUrlsChart();
          } catch (error) {
            alert(error.message);
            e.target.textContent = 'Delete';
            e.target.disabled = false;
          }
        });
      });
    }

    // Load popular URLs chart
    async function loadPopularUrlsChart() {
      try {
        const response = await fetch('/v1/urls/stats/popular', {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });
        const urls = await response.json();

        const ctx = document.getElementById('popular-urls-chart').getContext('2d');
        // Destroy existing chart if it exists
        if (window.urlChart) {
          window.urlChart.destroy();
        }
        window.urlChart = new Chart(ctx, {
          type: 'bar',
          data: {
            labels: urls.map(url => url.slug),
            datasets: [{
              label: 'Clicks',
              data: urls.map(url => url.clicks),
              backgroundColor: 'rgba(75, 192, 192, 0.6)',
              borderColor: 'rgba(75, 192, 192, 1)',
              borderWidth: 1
            }]
          },
          options: {
            responsive: true,
            scales: {
              y: {
                beginAtZero: true
              }
            }
          }
        });
      } catch (error) {
        console.error('Failed to load popular URLs:', error);
      }
    }

    // Shorten URL
    urlForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      errorDiv.textContent = '';
      resultDiv.textContent = '';

      const url = urlInput.value.trim();
      const slug = slugInput.value.trim();

      try {
        const submitBtn = urlForm.querySelector('button[type="submit"]');
        submitBtn.textContent = 'Shortening...';
        submitBtn.disabled = true;

        const response = await fetch('/v1/urls', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          },
          body: JSON.stringify({
            originalUrl: url,
            slug: slug || undefined
          })
        });

        if (!response.ok) {
          const error = await response.json();
          throw new Error(error.message || 'Failed to shorten URL');
        }

        const data = await response.json();
        resultDiv.innerHTML = `
          <div style="color: green;">Success! Your short URL: 
            <a href="${data.shortUrl}" target="_blank">${data.shortUrl}</a>
          </div>
        `;
        
        // Clear form
        urlInput.value = '';
        slugInput.value = '';
        
        // Refresh the URLs list
        loadUserUrls();
        loadPopularUrlsChart();
      } catch (error) {
        errorDiv.textContent = error.message;
      } finally {
        const submitBtn = urlForm.querySelector('button[type="submit"]');
        submitBtn.textContent = 'Shorten';
        submitBtn.disabled = false;
      }
    });

    // Initial load
    loadUserUrls();
    loadPopularUrlsChart();
  </script>
</body>
</html>